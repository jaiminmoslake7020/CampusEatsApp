var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var NativePageTransitionsOriginal = /** @class */ (function (_super) {
    __extends(NativePageTransitionsOriginal, _super);
    function NativePageTransitionsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativePageTransitionsOriginal.prototype.slide = function (options) { return cordova(this, "slide", {}, arguments); };
    NativePageTransitionsOriginal.prototype.flip = function (options) { return cordova(this, "flip", {}, arguments); };
    NativePageTransitionsOriginal.prototype.fade = function (options) { return cordova(this, "fade", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitionsOriginal.prototype.drawer = function (options) { return cordova(this, "drawer", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitionsOriginal.prototype.curl = function (options) { return cordova(this, "curl", { "platforms": ["iOS"] }, arguments); };
    NativePageTransitionsOriginal.prototype.executePendingTransition = function () { return cordova(this, "executePendingTransition", {}, arguments); };
    NativePageTransitionsOriginal.prototype.cancelPendingTransition = function () { return cordova(this, "cancelPendingTransition", {}, arguments); };
    NativePageTransitionsOriginal.pluginName = "NativePageTransitions";
    NativePageTransitionsOriginal.plugin = "com.telerik.plugins.nativepagetransitions";
    NativePageTransitionsOriginal.pluginRef = "plugins.nativepagetransitions";
    NativePageTransitionsOriginal.repo = "https://github.com/Telerik-Verified-Plugins/NativePageTransitions";
    NativePageTransitionsOriginal.platforms = ["Android", "iOS", "Windows Phone 8"];
    return NativePageTransitionsOriginal;
}(IonicNativePlugin));
var NativePageTransitions = new NativePageTransitionsOriginal();
export { NativePageTransitions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL25hdGl2ZS1wYWdlLXRyYW5zaXRpb25zL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXNFN0IseUNBQWlCOzs7O0lBTzFELHFDQUFLLGFBQUMsT0FBZ0M7SUFVdEMsb0NBQUksYUFBQyxPQUFnQztJQVVyQyxvQ0FBSSxhQUFDLE9BQWdDO0lBV3JDLHNDQUFNLGFBQUMsT0FBZ0M7SUFXdkMsb0NBQUksYUFBQyxPQUFnQztJQVNyQyx3REFBd0I7SUFTeEIsdURBQXVCOzs7Ozs7Z0NBMUl6QjtFQXVFMkMsaUJBQWlCO1NBQS9DLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zIHtcbiAgZGlyZWN0aW9uPzogc3RyaW5nO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbiAgc2xvd2Rvd25mYWN0b3I/OiBudW1iZXI7XG4gIHNsaWRlUGl4ZWxzPzogbnVtYmVyO1xuICBpb3NkZWxheT86IG51bWJlcjtcbiAgYW5kcm9pZGRlbGF5PzogbnVtYmVyO1xuICB3aW5waG9uZWRlbGF5PzogbnVtYmVyO1xuICBmaXhlZFBpeGVsc1RvcD86IG51bWJlcjtcbiAgZml4ZWRQaXhlbHNCb3R0b20/OiBudW1iZXI7XG4gIGFjdGlvbj86IHN0cmluZztcbiAgb3JpZ2luPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIE5hdGl2ZSBQYWdlIFRyYW5zaXRpb25zXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBOYXRpdmUgUGFnZSBUcmFuc2l0aW9ucyBwbHVnaW4gdXNlcyBuYXRpdmUgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIHRvIGFuaW1hdGUgeW91ciB0cmFuc2l0aW9ucyBiZXR3ZWVuIHZpZXdzLiBZb3UgaGF2ZSBjb21wbGV0ZSBjb250cm9sIG92ZXIgdGhlIHR5cGUgb2YgdHJhbnNpdGlvbiwgdGhlIGR1cmF0aW9uLCBhbmQgZGlyZWN0aW9uLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmF0aXZlUGFnZVRyYW5zaXRpb25zLCBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbmF0aXZlLXBhZ2UtdHJhbnNpdGlvbnMvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hdGl2ZVBhZ2VUcmFuc2l0aW9uczogTmF0aXZlUGFnZVRyYW5zaXRpb25zKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogLy8gZXhhbXBsZSBvZiBhZGRpbmcgYSB0cmFuc2l0aW9uIHdoZW4gYSBwYWdlL21vZGFsIGNsb3Nlc1xuICogaW9uVmlld1dpbGxMZWF2ZSgpIHtcbiAqXG4gKiAgbGV0IG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zID0ge1xuICogICAgIGRpcmVjdGlvbjogJ3VwJyxcbiAqICAgICBkdXJhdGlvbjogNTAwLFxuICogICAgIHNsb3dkb3duZmFjdG9yOiAzLFxuICogICAgIHNsaWRlUGl4ZWxzOiAyMCxcbiAqICAgICBpb3NkZWxheTogMTAwLFxuICogICAgIGFuZHJvaWRkZWxheTogMTUwLFxuICogICAgIGZpeGVkUGl4ZWxzVG9wOiAwLFxuICogICAgIGZpeGVkUGl4ZWxzQm90dG9tOiA2MFxuICogICAgfVxuICpcbiAqICB0aGlzLm5hdGl2ZVBhZ2VUcmFuc2l0aW9ucy5zbGlkZShvcHRpb25zKVxuICogICAgLnRoZW4ob25TdWNjZXNzKVxuICogICAgLmNhdGNoKG9uRXJyb3IpO1xuICpcbiAqIH1cbiAqXG4gKlxuICogLy8gZXhhbXBsZSBvZiBhZGRpbmcgYSB0cmFuc2l0aW9uIHdoZW4gcHVzaGluZyBhIG5ldyBwYWdlXG4gKiBvcGVuUGFnZShwYWdlOiBhbnkpIHtcbiAqXG4gKiAgIHRoaXMubmF0aXZlUGFnZVRyYW5zaXRpb25zLnNsaWRlKG9wdGlvbnMpO1xuICogICB0aGlzLm5hdkN0cmwucHVzaChwYWdlKTtcbiAqXG4gKiB9XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnTmF0aXZlUGFnZVRyYW5zaXRpb25zJyxcbiAgcGx1Z2luOiAnY29tLnRlbGVyaWsucGx1Z2lucy5uYXRpdmVwYWdldHJhbnNpdGlvbnMnLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLm5hdGl2ZXBhZ2V0cmFuc2l0aW9ucycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVGVsZXJpay1WZXJpZmllZC1QbHVnaW5zL05hdGl2ZVBhZ2VUcmFuc2l0aW9ucycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOYXRpdmVQYWdlVHJhbnNpdGlvbnMgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgc2xpZGUgYW5pbWF0aW9uXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2xpZGUob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgZmxpcCBhbmltYXRpb25cbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBmbGlwKG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhIGZhZGUgYW5pbWF0aW9uXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ10gfSlcbiAgZmFkZShvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cblxuICAvKipcbiAgICogUGVyZm9ybSBhIHNsaWRlIGFuaW1hdGlvblxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlVHJhbnNpdGlvbk9wdGlvbnN9IE9wdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCddIH0pXG4gIGRyYXdlcihvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cblxuICAvKipcbiAgICogUGVyZm9ybSBhIHNsaWRlIGFuaW1hdGlvblxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlVHJhbnNpdGlvbk9wdGlvbnN9IE9wdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxuICBjdXJsKG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBwZW5kaW5nIHRyYW5zaXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZXhlY3V0ZVBlbmRpbmdUcmFuc2l0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbCBwZW5kaW5nIHRyYW5zaXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2FuY2VsUGVuZGluZ1RyYW5zaXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxufVxuIl19